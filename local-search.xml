<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>二叉树问题巧解</title>
    <link href="/2025/09/07/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%97%AE%E9%A2%98%E5%B7%A7%E8%A7%A3/"/>
    <url>/2025/09/07/%E4%BA%8C%E5%8F%89%E6%A0%91%E9%97%AE%E9%A2%98%E5%B7%A7%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>二叉树是每个节点最多有两个儿子节点的一棵树，如图所示这就是一棵二叉树。</p><p><img src="https://oi-wiki.org/graph/images/tree-binary-proper.svg" alt="二叉树"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="求二叉树的前中后序遍历"><a href="#求二叉树的前中后序遍历" class="headerlink" title="求二叉树的前中后序遍历"></a>求二叉树的前中后序遍历</h3><p>前序: 在每个节点的左边点一个点</p><p>中序: 在每个节点的下面点一个点</p><p>后序: 在每个节点的右边点一个点</p><p>再按下图的这个顺序画, 再按每个节点穿过的先后, 将这个顺序写下来, 就是所要的前中后序遍历</p><p><img src="/img/18.png" alt="二叉树的遍历"></p><h3 id="知二叉树的两种遍历方式求另外一种"><a href="#知二叉树的两种遍历方式求另外一种" class="headerlink" title="知二叉树的两种遍历方式求另外一种"></a>知二叉树的两种遍历方式求另外一种</h3><h4 id="知前序和中序"><a href="#知前序和中序" class="headerlink" title="知前序和中序"></a>知前序和中序</h4><p>将前序遍历按原先的顺序竖着写一遍, 将中序遍历按原先的顺序横着写一遍。</p><p><img src="/img/15.png" alt="前序和中序"></p><p>按图片的操作即可得到一个二叉树, 求后序遍历再用前面的方法即可。</p><h4 id="知中序和后序"><a href="#知中序和后序" class="headerlink" title="知中序和后序"></a>知中序和后序</h4><p>将后序遍历按倒着的顺序竖着写一遍, 将中序遍历按原先的顺序横着写一遍。</p><p><img src="/img/19.png" alt="中序和后序"></p><p>按图片的操作即可得到一个二叉树, 求 先序遍历再用前面的方法即可。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>二叉堆</title>
    <link href="/2025/09/06/%E4%BA%8C%E5%8F%89%E5%A0%86/"/>
    <url>/2025/09/06/%E4%BA%8C%E5%8F%89%E5%A0%86/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉堆"><a href="#二叉堆" class="headerlink" title="二叉堆"></a>二叉堆</h1><h2 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h2><p>定义：它是一棵二叉树, 并且是完全二叉树, 且分大根堆和小根堆。</p><p>大根堆性质: 父结点的值大于或等于其子结点的值</p><p>小根堆性质: 父结点的值小于或等于其子结点的值</p><p>存储：首先我们用一个数组h来表示堆, 对于每个h[i], 它的儿子是h[i * 2]和h[i * 2 + 1], 下面有一张很形象的图。</p><p><img src="https://oi-wiki.org/ds/images/binary-heap-array.svg" alt="二叉堆"></p><h2 id="二叉堆的两个基本操作-指大根堆"><a href="#二叉堆的两个基本操作-指大根堆" class="headerlink" title="二叉堆的两个基本操作 (指大根堆)"></a>二叉堆的两个基本操作 (指大根堆)</h2><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p>操作：在堆的最下一层最右边的叶子之后插入一个元素, 如果最下一层已满, 就新增一层。(一直满足满二叉树的性质)</p><p>疑问：如果插入以后不满足堆的性质怎么办？</p><p>所以, 我们要 <strong>向上调整</strong> , 如果插进来的新节点, 每大于它的父亲节点，便交换一次位置, 直到不满足或作为根节点为止。</p><p><img src="https://oi-wiki.org/ds/images/binary_heap_insert.svg" alt="插入操作"></p><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>操作: 把根结点和最后一个结点直接交换，然后将原先的根节点删掉</p><p>疑问: 如果新的根节点不满足堆的性质怎么办？</p><p>所以, 我们要 <strong>向下调整</strong> ，如果新的根节点小于它其中一个儿子，于是将它与它权值最大的儿子交换位置，重复此过程直到该节点到了最后一层，或者它的权值大于它的儿子。</p><h2 id="二叉堆的两个基本操作-指小根堆"><a href="#二叉堆的两个基本操作-指小根堆" class="headerlink" title="二叉堆的两个基本操作 (指小根堆)"></a>二叉堆的两个基本操作 (指小根堆)</h2><h3 id="插入操作-1"><a href="#插入操作-1" class="headerlink" title="插入操作"></a>插入操作</h3><p>操作：在堆的最下一层最右边的叶子之后插入一个元素, 如果最下一层已满, 就新增一层。(一直满足满二叉树的性质)</p><p>疑问：如果插入以后不满足堆的性质怎么办？</p><p>所以, 我们要 <strong>向上调整</strong> , 如果插进来的新节点, 每小于它的父亲节点，便交换一次位置, 直到不满足或作为根节点为止。</p><h3 id="删除操作-1"><a href="#删除操作-1" class="headerlink" title="删除操作"></a>删除操作</h3><p>操作: 把根结点和最后一个结点直接交换，然后将原先的根节点删掉</p><p>疑问: 如果新的根节点不满足堆的性质怎么办？</p><p>所以, 我们要 <strong>向下调整</strong> ，如果新的根节点大于它其中一个儿子，于是将它与它权值最小的儿子交换位置，重复此过程直到该节点到了最后一层，或者它的权值小于它的儿子。</p><h2 id="基本操作代码-手写堆"><a href="#基本操作代码-手写堆" class="headerlink" title="基本操作代码 (手写堆)"></a>基本操作代码 (手写堆)</h2><h3 id="大根堆"><a href="#大根堆" class="headerlink" title="大根堆"></a>大根堆</h3><h4 id="插入操作代码"><a href="#插入操作代码" class="headerlink" title="插入操作代码"></a>插入操作代码</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-comment">// 对第x个节点进行向上调整</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">1</span> &amp;&amp; h[x] &gt; h[x/<span class="hljs-number">2</span>])<br>&#123;<br><span class="hljs-built_in">swap</span>(h[x], h[x/<span class="hljs-number">2</span>]); <span class="hljs-comment">// 将节点交换</span><br>x /= <span class="hljs-number">2</span>; <span class="hljs-comment">// 节点继续向上操作  </span><br>&#125;<br>&#125; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> <span class="hljs-comment">// 插入值为num的一个节点</span></span><br><span class="hljs-function"></span>&#123;<br>h[++size] = num; <span class="hljs-comment">// size记录为当前节点编号 </span><br><span class="hljs-built_in">up</span>(size); <span class="hljs-comment">// 向上调整 </span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="删除操作代码"><a href="#删除操作代码" class="headerlink" title="删除操作代码"></a>删除操作代码</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-comment">// 对第x个节点进行向下调整</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span> (x * <span class="hljs-number">2</span> &lt;= size) <span class="hljs-comment">// 判断是否出界 </span><br>&#123;<br><span class="hljs-type">int</span> t = x * <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (t + <span class="hljs-number">1</span> &lt;= size &amp;&amp; h[t + <span class="hljs-number">1</span>] &gt; h[t]) t++; <span class="hljs-comment">// 如果右儿子没有出界，且权值大于左儿子，用右儿子进行比较 </span><br><span class="hljs-keyword">if</span> (h[t] &lt;= h[x]) <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 如果小于等于退出 </span><br><span class="hljs-built_in">swap</span>(h[x], h[t]); <span class="hljs-comment">// 交换 </span><br>x = t; <span class="hljs-comment">// 继续向下操作 </span><br>&#125; <br>&#125; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">erase</span><span class="hljs-params">()</span> <span class="hljs-comment">// 删除根节点</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">swap</span>(h[<span class="hljs-number">1</span>], h[size]); <span class="hljs-comment">// 交换第一个和最后一个节点 </span><br>size--;<br><span class="hljs-built_in">down</span>(<span class="hljs-number">1</span>);<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="小根堆"><a href="#小根堆" class="headerlink" title="小根堆"></a>小根堆</h3><h4 id="插入操作代码-1"><a href="#插入操作代码-1" class="headerlink" title="插入操作代码"></a>插入操作代码</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-comment">// 对第x个节点进行向上调整</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">1</span> &amp;&amp; h[x] &lt; h[x/<span class="hljs-number">2</span>])<br>&#123;<br><span class="hljs-built_in">swap</span>(h[x], h[x/<span class="hljs-number">2</span>]); <span class="hljs-comment">// 将节点交换</span><br>x /= <span class="hljs-number">2</span>; <span class="hljs-comment">// 节点继续向上操作  </span><br>&#125;<br>&#125; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> <span class="hljs-comment">// 插入值为num的一个节点</span></span><br><span class="hljs-function"></span>&#123;<br>h[++size] = num; <span class="hljs-comment">// size记录为当前节点编号 </span><br><span class="hljs-built_in">up</span>(size); <span class="hljs-comment">// 向上调整 </span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="删除操作代码-1"><a href="#删除操作代码-1" class="headerlink" title="删除操作代码"></a>删除操作代码</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-comment">// 对第x个节点进行向下调整</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span> (x * <span class="hljs-number">2</span> &lt;= size) <span class="hljs-comment">// 判断是否出界 </span><br>&#123;<br><span class="hljs-type">int</span> t = x * <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (t + <span class="hljs-number">1</span> &lt;= size &amp;&amp; h[t + <span class="hljs-number">1</span>] &lt; h[t]) t++; <span class="hljs-comment">// 如果右儿子没有出界，且权值大于左儿子，用右儿子进行比较 </span><br><span class="hljs-keyword">if</span> (h[t] &gt;= h[x]) <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 如果小于等于退出 </span><br><span class="hljs-built_in">swap</span>(h[x], h[t]); <span class="hljs-comment">// 交换 </span><br>x = t; <span class="hljs-comment">// 继续向下操作 </span><br>&#125; <br>&#125; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">erase</span><span class="hljs-params">()</span> <span class="hljs-comment">// 删除根节点</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">swap</span>(h[<span class="hljs-number">1</span>], h[size]); <span class="hljs-comment">// 交换第一个和最后一个节点 </span><br>size--;<br><span class="hljs-built_in">down</span>(<span class="hljs-number">1</span>);<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="C-大根堆和小根堆的定义"><a href="#C-大根堆和小根堆的定义" class="headerlink" title="C++大根堆和小根堆的定义"></a>C++大根堆和小根堆的定义</h2><h3 id="大根堆-1"><a href="#大根堆-1" class="headerlink" title="大根堆"></a>大根堆</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">priority_queue&lt;<span class="hljs-type">int</span>&gt; pq; <span class="hljs-comment">// 默认大根堆</span><br></code></pre></td></tr></table></figure><h3 id="小根堆-1"><a href="#小根堆-1" class="headerlink" title="小根堆"></a>小根堆</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">priority_queue&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt; &gt; pq; <span class="hljs-comment">// 小根堆</span><br></code></pre></td></tr></table></figure><h2 id="习题-堆-模版"><a href="#习题-堆-模版" class="headerlink" title="习题 - 堆 (模版)"></a><a href="https://www.luogu.com.cn/problem/P3378">习题 - 堆 (模版)</a></h2><h3 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h3><p>题目大意:  有三种操作: 插入一个数、输出最小值，删除最小值</p><p>显然我们用小根堆, 即可知道最小值 (就是根节点)</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="手写堆"><a href="#手写堆" class="headerlink" title="手写堆"></a>手写堆</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">15</span>;<br><span class="hljs-type">int</span> h[N], size = <span class="hljs-number">0</span>, x[N];<br><span class="hljs-type">int</span> n;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-comment">// 对第x个节点进行向上调整</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">1</span> &amp;&amp; h[x] &lt; h[x/<span class="hljs-number">2</span>]) <span class="hljs-comment">// 如果儿子节点小于父亲节点就交换</span><br>&#123;<br><span class="hljs-built_in">swap</span>(h[x], h[x/<span class="hljs-number">2</span>]); <span class="hljs-comment">// 将节点交换</span><br>x /= <span class="hljs-number">2</span>; <span class="hljs-comment">// 节点继续向上操作  </span><br>&#125;<br>&#125; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> <span class="hljs-comment">// 插入值为num的一个节点</span></span><br><span class="hljs-function"></span>&#123;<br>h[++size] = num; <span class="hljs-comment">// size记录为当前节点编号 </span><br><span class="hljs-built_in">up</span>(size); <span class="hljs-comment">// 向上调整 </span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span> <span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-comment">// 对第x个节点进行向下调整</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span> (x * <span class="hljs-number">2</span> &lt;= size) <span class="hljs-comment">// 判断是否出界 </span><br>&#123;<br><span class="hljs-type">int</span> t = x * <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (t + <span class="hljs-number">1</span> &lt;= size &amp;&amp; h[t + <span class="hljs-number">1</span>] &lt; h[t]) t++; <span class="hljs-comment">// 如果右儿子没有出界，且权值小于左儿子，用右儿子进行比较 </span><br><span class="hljs-keyword">if</span> (h[t] &gt;= h[x]) <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 如果大于等于退出 </span><br><span class="hljs-built_in">swap</span>(h[x], h[t]); <span class="hljs-comment">// 交换 </span><br>x = t; <span class="hljs-comment">// 继续向下操作 </span><br>&#125; <br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">erase</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> <span class="hljs-comment">// 删除值为num的一个节点</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">swap</span>(h[<span class="hljs-number">1</span>], h[size]); <span class="hljs-comment">// 交换第一个和最后一个节点 </span><br>size--;<br><span class="hljs-built_in">down</span>(<span class="hljs-number">1</span>);<br>&#125; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br><span class="hljs-type">int</span> op;<br>cin &gt;&gt; op;<br><span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-type">int</span> x;<br>cin &gt;&gt; x;<br><span class="hljs-built_in">insert</span>(x); <br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>) cout &lt;&lt; h[<span class="hljs-number">1</span>] &lt;&lt; endl;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">erase</span>(h[<span class="hljs-number">1</span>]);<br>&#125; <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="C-定义的堆"><a href="#C-定义的堆" class="headerlink" title="C++定义的堆"></a>C++定义的堆</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>priority_queue&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt; &gt; p;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-type">int</span> n;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br><span class="hljs-type">int</span> op, x;<br>cin &gt;&gt; op;<br><span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) cin &gt;&gt; x, p.<span class="hljs-built_in">push</span>(x);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>) cout &lt;&lt; p.<span class="hljs-built_in">top</span>() &lt;&lt; endl;<br><span class="hljs-keyword">else</span> p.<span class="hljs-built_in">pop</span>();<br>&#125; <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
