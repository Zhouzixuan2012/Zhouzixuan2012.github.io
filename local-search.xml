<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>二叉堆</title>
    <link href="/2025/09/06/%E4%BA%8C%E5%8F%89%E5%A0%86/"/>
    <url>/2025/09/06/%E4%BA%8C%E5%8F%89%E5%A0%86/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉堆"><a href="#二叉堆" class="headerlink" title="二叉堆"></a>二叉堆</h1><h2 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h2><p>定义：它是一棵二叉树, 并且是完全二叉树。</p><p>堆性质：父亲的权值不小于儿子的权值</p><p>存储：首先我们用一个数组h来表示堆, 对于每个h[i], 它的儿子是h[i * 2]和h[i * 2 + 1], 下面有一张很形象的图。</p><p><img src="https://oi-wiki.org/ds/images/binary-heap-array.svg" alt="二叉堆"></p><h2 id="二叉堆的两个基本操作"><a href="#二叉堆的两个基本操作" class="headerlink" title="二叉堆的两个基本操作"></a>二叉堆的两个基本操作</h2><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><p>操作：在堆的最下一层最右边的叶子之后插入一个元素, 如果最下一层已满, 就新增一层。(一直满足满二叉树的性质)</p><p>疑问：如果插入以后不满足堆的性质怎么办？</p><p>所以, 我们要 <strong>向上调整</strong> , 如果插进来的新节点, 每大于它的父亲节点，便交换一次位置, 直到不满足或作为根节点为止。</p><p><img src="https://oi-wiki.org/ds/images/binary_heap_insert.svg" alt="插入操作"></p><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><p>操作: 把根结点和最后一个结点直接交换，然后将原先的根节点删掉</p><p>疑问: 如果新的根节点不满足堆的性质怎么办？</p><p>所以, 我们要 <strong>向下调整</strong> ，如果新的根节点小于它其中一个儿子，于是将它与它权值最大的儿子交换位置，重复此过程直到该节点到了最后一层，或者它的权值大于它的儿子。</p><h2 id="基本操作代码"><a href="#基本操作代码" class="headerlink" title="基本操作代码"></a>基本操作代码</h2><h3 id="插入操作代码"><a href="#插入操作代码" class="headerlink" title="插入操作代码"></a>插入操作代码</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> <span class="hljs-comment">// 插入值为num的一个节点</span></span><br><span class="hljs-function"></span>&#123;<br>h[++size] = num; <span class="hljs-comment">// size记录为当前节点编号 </span><br><span class="hljs-built_in">up</span>(size); <span class="hljs-comment">// 向上调整 </span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-comment">// 对第x个节点进行向上调整</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">1</span> &amp;&amp; h[x] &gt; h[x/<span class="hljs-number">2</span>])<br>&#123;<br><span class="hljs-built_in">swap</span>(h[x], h[x/<span class="hljs-number">2</span>]); <span class="hljs-comment">// 将节点交换</span><br>x /= <span class="hljs-number">2</span>; <span class="hljs-comment">// 节点继续向上操作  </span><br>&#125;<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="删除操作代码"><a href="#删除操作代码" class="headerlink" title="删除操作代码"></a>删除操作代码</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">erase</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> <span class="hljs-comment">// 删除值为num的一个节点</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">swap</span>(h[<span class="hljs-number">1</span>], h[size]); <span class="hljs-comment">// 交换第一个和最后一个节点 </span><br>size--;<br><span class="hljs-built_in">down</span>(<span class="hljs-number">1</span>);<br>&#125; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span> <span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-comment">// 对第x个节点进行向下调整</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span> (x * <span class="hljs-number">2</span> &lt;= n) <span class="hljs-comment">// 判断是否出界 </span><br>&#123;<br><span class="hljs-type">int</span> t = x * <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (t + <span class="hljs-number">1</span> &lt;= n &amp;&amp; h[t + <span class="hljs-number">1</span>] &gt; h[t]) t++; <span class="hljs-comment">// 如果右儿子没有出界，且权值大于左儿子，用右儿子进行比较 </span><br><span class="hljs-keyword">if</span> (h[t] &lt;= h[x]) <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 如果小于等于退出 </span><br><span class="hljs-built_in">swap</span>(h[x], h[t]); <span class="hljs-comment">// 交换 </span><br>x = t; <span class="hljs-comment">// 继续向下操作 </span><br>&#125; <br>&#125; <br></code></pre></td></tr></table></figure><h2 id="习题"><a href="#习题" class="headerlink" title="习题"></a><a href="https://www.luogu.com.cn/problem/P3378">习题</a></h2><h3 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h3><p>题目大意:  有三种操作: 插入一个数、输出最小值，删除最小值</p><p>我们考虑每种操作怎么实现，插入一个数用学的 <strong>up</strong> 和 <strong>insert</strong> 函数即可，删除一个数用 <strong>down</strong> 和 <strong>erase</strong> 函数即可。</p><p>所以关键在于怎么求最小值，我们的 <strong>向上调整</strong> 和 <strong>向下调整</strong> 的本质是通过将父亲节点与儿子节点进行交换，让大的数尽可能在上面，所以按上面的代码堆的根节点永远是最大值，所以我们只需做一点修改，即可把根变为最小值。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std; <br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span> + <span class="hljs-number">15</span>;<br><span class="hljs-type">int</span> h[N], size = <span class="hljs-number">0</span>, x[N];<br><span class="hljs-type">int</span> n;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">up</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-comment">// 对第x个节点进行向上调整</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">1</span> &amp;&amp; h[x] &lt; h[x/<span class="hljs-number">2</span>]) <span class="hljs-comment">// 如果儿子节点小于父亲节点就交换</span><br>&#123;<br><span class="hljs-built_in">swap</span>(h[x], h[x/<span class="hljs-number">2</span>]); <span class="hljs-comment">// 将节点交换</span><br>x /= <span class="hljs-number">2</span>; <span class="hljs-comment">// 节点继续向上操作  </span><br>&#125;<br>&#125; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> <span class="hljs-comment">// 插入值为num的一个节点</span></span><br><span class="hljs-function"></span>&#123;<br>h[++size] = num; <span class="hljs-comment">// size记录为当前节点编号 </span><br><span class="hljs-built_in">up</span>(size); <span class="hljs-comment">// 向上调整 </span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">down</span> <span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-comment">// 对第x个节点进行向下调整</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span> (x * <span class="hljs-number">2</span> &lt;= size) <span class="hljs-comment">// 判断是否出界 </span><br>&#123;<br><span class="hljs-type">int</span> t = x * <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (t + <span class="hljs-number">1</span> &lt;= size &amp;&amp; h[t + <span class="hljs-number">1</span>] &lt; h[t]) t++; <span class="hljs-comment">// 如果右儿子没有出界，且权值小于左儿子，用右儿子进行比较 </span><br><span class="hljs-keyword">if</span> (h[t] &gt;= h[x]) <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 如果大于等于退出 </span><br><span class="hljs-built_in">swap</span>(h[x], h[t]); <span class="hljs-comment">// 交换 </span><br>x = t; <span class="hljs-comment">// 继续向下操作 </span><br>&#125; <br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">erase</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> <span class="hljs-comment">// 删除值为num的一个节点</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">swap</span>(h[<span class="hljs-number">1</span>], h[size]); <span class="hljs-comment">// 交换第一个和最后一个节点 </span><br>size--;<br><span class="hljs-built_in">down</span>(<span class="hljs-number">1</span>);<br>&#125; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>cin &gt;&gt; n;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)<br>&#123;<br><span class="hljs-type">int</span> op;<br>cin &gt;&gt; op;<br><span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-type">int</span> x;<br>cin &gt;&gt; x;<br><span class="hljs-built_in">insert</span>(x); <br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>) cout &lt;&lt; h[<span class="hljs-number">1</span>] &lt;&lt; endl;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">erase</span>(h[<span class="hljs-number">1</span>]);<br>&#125; <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
